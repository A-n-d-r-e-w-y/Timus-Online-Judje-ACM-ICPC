const NMAX=150;
var
 a:array[1..NMAX,1..NMAX] of boolean;
 dist,list,predok,count:array[1..NMAX] of longint;
 nnew:array[1..NMAX] of boolean;
 inter:array[1..NMAX,1..10] of string;
 N,i,j,k,s,f,i1,i2,up,down:longint;

function IP(s1,s2:string):boolean;
 var r1,r2,r3,r4,t1,t2,t3,t4,a1,a2,a3,a4,b1,b2,b3,b4,t,k:longint;
     res1,m1,res2,m2:int64;
     s,s3:string;
     f:boolean;
begin
 t:=pos(' ',s1);
 s3:=copy(s1,t+1,length(s1)-t);
 delete(s1,t,length(s1)-t+1);
 t:=pos('.',s1);
 s:=copy(s1,1,t-1);
 Val(s,r1,k);
 delete(s1,1,t);
 t:=pos('.',s1);
 s:=copy(s1,1,t-1);
 Val(s,r2,k);
 delete(s1,1,t);
 t:=pos('.',s1);
 s:=copy(s1,1,t-1);
 Val(s,r3,k);
 delete(s1,1,t);
 Val(s1,r4,k);
 
 s1:=s3;
 t:=pos(' ',s1);
 delete(s1,t,length(s1)-t+1);
 t:=pos('.',s1);
 s:=copy(s1,1,t-1);
 Val(s,t1,k);
 delete(s1,1,t);
 t:=pos('.',s1);
 s:=copy(s1,1,t-1);
 Val(s,t2,k);
 delete(s1,1,t);
 t:=pos('.',s1);
 s:=copy(s1,1,t-1);
 Val(s,t3,k);
 delete(s1,1,t);
 Val(s1,t4,k);
 
 s1:=s2;
 t:=pos(' ',s1);
 s3:=copy(s1,t+1,length(s1)-t);
 delete(s1,t,length(s1)-t+1);
 t:=pos('.',s1);
 s:=copy(s1,1,t-1);
 Val(s,a1,k);
 delete(s1,1,t);
 t:=pos('.',s1);
 s:=copy(s1,1,t-1);
 Val(s,a2,k);
 delete(s1,1,t);
 t:=pos('.',s1);
 s:=copy(s1,1,t-1);
 Val(s,a3,k);
 delete(s1,1,t);
 Val(s1,a4,k);
 
 s1:=s3;
 t:=pos(' ',s1);
 delete(s1,t,length(s1)-t+1);
 t:=pos('.',s1);
 s:=copy(s1,1,t-1);
 Val(s,b1,k);
 delete(s1,1,t);
 t:=pos('.',s1);
 s:=copy(s1,1,t-1);
 Val(s,b2,k);
 delete(s1,1,t);
 t:=pos('.',s1);
 s:=copy(s1,1,t-1);
 Val(s,b3,k);
 delete(s1,1,t);
 Val(s1,b4,k);
 
 res1:=r1 shl 24;
 res1:=res1 + (r2 shl 16);
 res1:=res1 + (r3 shl 8);
 res1:=res1 + r4;
 m1:=t1 shl 24;
 m1:=m1 + (t2 shl 16);
 m1:=m1 + (t3 shl 8);
 m1:=m1 + t4;
 res2:=a1 shl 24;
 res2:=res2 + (a2 shl 16);
 res2:=res2 + (a3 shl 8);
 res2:=res2 + a4;
 m2:=b1 shl 24;
 m2:=m2 + (b2 shl 16);
 m2:=m2 + (b3 shl 8);
 m2:=m2 + b4;

 IP:=(res1 and m1)=(res2 and m2);
end;
 
procedure G(up,down:longint);
 var j,v:longint;
begin
 inc(down);
 if(down<=up) then begin
  v:=List[down];
  for j:=1 to N do begin
   if(nnew[j])and(a[v,j]) then begin
    nnew[j]:=false;
    dist[j]:=dist[v]+1;
    predok[j]:=v;
    inc(up);
    List[up]:=j;
   end;
  end;
  G(up,down);
 end;
end;
 
begin
 readln(N);
 for i:=1 to N do begin
  readln(K);
  count[i]:=K;
  dist[i]:=N+5;
  nnew[i]:=true;
  for j:=1 to K do readln(inter[i,j]);
 end;
 read(s,f);
 
 for i:=1 to N do begin
 for j:=1 to N do begin
  a[i,j]:=false;
 end;
 end;
 
 for i:=1 to N-1 do begin
 for j:=i+1 to N do begin
  for i1:=1 to count[i] do begin
  for i2:=1 to count[j] do begin
   a[i,j]:=a[i,j] or IP(inter[i,i1],inter[j,i2]);
   a[j,i]:=a[j,i] or a[i,j];
  end;
  end;
 end;
 end;
 
 dist[s]:=0;
 nnew[s]:=false;
 up:=1;
 down:=0;
 list[up]:=s;
 G(up,down);
 
 if(dist[f]<>N+5) then begin
  i:=f;
  j:=N+1;
  while(i<>s) do begin
   dec(j);
   List[j]:=i;
   i:=predok[i];
  end;
 
  writeln('Yes');
  write(s,' ');
  for i:=j to N do write(List[i],' ');
 end
 else begin
  write('No');
 end; 
end.