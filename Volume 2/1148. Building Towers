#include <iostream>
#include <map>
using namespace std;

#define ll unsigned long long

const long p1 = 10000, p2 = 100;
const long jmax = 10 + 60 - 1, kmax = 60;

map<long, ll> F;
map<long, ll>::iterator it;
long i_max[jmax + 1][kmax + 1], i_min[jmax + 1][kmax + 1];

int N, M, H;
ll K;

ll Min(ll x, ll y) { return x < y ? x : y; }
long Hash(long i, long j, long k) { return p1 *i + p2 * j + k; }
ll Rec(long i, long j, long k);

int main()
{
	cin >> N >> H >> M;

	for (long j = 1; j <= jmax; j++)
		for (long k = 1; k <= kmax; k++)
			i_max[j][k] = j*k + k*(k - 1) / 2;

	for (int j = 1; j <= jmax; j++)
		for (int k = 1; k <= kmax; k++)
		{
			if (k == j) i_min[j][k] = j*(j + 1) / 2;
			else if (k<j) i_min[j][k] = j*(j + 1) / 2 - (j - k)*(j - k + 1) / 2;
			else i_min[j][k] = j*(j + 1) / 2 + k - j + (k - j + 1) / 2;
		}

	cout << Rec(N, M, H);

	cin >> K;
	while (K != -1)
	{
		cout << endl;
		long i = N, j = M, k = H;
		cout << j;
		while (k > 1)
		{
			ll left = Rec(i - j, j - 1, k - 1), right = Rec(i - j, j + 1, k - 1);
			if (left >= K)
			{
				i -= j, j--, k--;
				cout << " " << j;
			}
			else
			{
				K -= left;
				i -= j, j++, k--;
				cout << " " << j;
			}
		}
		cin >> K;
	}

	return 0;
}


ll Rec(long i, long j, long k)
{
	if (j == 0 || i<j) return 0;
	if (k == 1) return 1;
	else
	{
		i = Min(i, i_max[j][k]);
		if (i<i_min[j][k]) return 0;
		ll now = 0;

		ll prev1 = Hash(i - j, j - 1, k - 1);
		ll prev2 = Hash(i - j, j + 1, k - 1);

		if ((it = F.find(prev1)) == F.end())
		{
			ll c = Rec(i - j, j - 1, k - 1);
			if (k & 1) F[prev1] = c;
			now += c;
		}
		else now += it->second;

		if ((it = F.find(prev2)) == F.end())
		{
			ll c = Rec(i - j, j + 1, k - 1);
			if (k & 1) F[prev2] = c;
			now += c;
		}
		else now += it->second;

		if (k & 1) F[Hash(i, j, k)] = now;
		return now;
	}
}