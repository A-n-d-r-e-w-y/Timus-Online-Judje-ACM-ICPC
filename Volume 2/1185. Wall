#include <algorithm>
#include <vector>
#include <iostream>
using namespace std;

#define ll long long

struct pt {ll x, y;};

const double PI=3.141592653589793238462643383279;
const int nmax=4005;

int n,L;
ll x[nmax],y[nmax];
vector<pt> a;
double ans;

bool cmp (pt a, pt b);
bool cw (pt a, pt b, pt c);
bool ccw (pt a, pt b, pt c);
ll sq2 (vector<pt> a);
bool on_line(pt p, pt a, pt b);
void convex_hull (vector<pt> & a);
double dist(pt a, pt b);

int main()
{
     cin>>n>>L;
     for(int i=0;i<n;i++)
     {
        cin>>x[i]>>y[i];
        pt p;
        p.x=x[i], p.y=y[i];
        a.push_back(p);
     }
     convex_hull(a);
     
     ans=0;
     for(int i=0;i<a.size()-1;i++) ans+=dist(a[i], a[i+1]);
     ans+=dist(a[a.size()-1], a[0]);
     ans+=L*2.0*PI;
     
     printf("%.0lf",ans);
     
     return 0;
}

double dist(pt a, pt b)
{
   return sqrt((double)((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y)));
}

bool cmp (pt a, pt b) {return a.x < b.x || a.x == b.x && a.y < b.y;}
bool cw (pt a, pt b, pt c) {return a.x*(b.y-c.y)+b.x*(c.y-a.y)+c.x*(a.y-b.y) < 0;}
bool ccw (pt a, pt b, pt c) {return a.x*(b.y-c.y)+b.x*(c.y-a.y)+c.x*(a.y-b.y) > 0;}

ll sq2 (vector<pt> a)
{
     ll res=0;
     for(int i=0;i<a.size()-1;i++) res+=a[i].x*a[i+1].y-a[i+1].x*a[i].y;
     res+=a[a.size()-1].x*a[0].y-a[a.size()-1].y*a[0].x;
     return res;
}

bool on_line(pt p, pt a, pt b){return (b.y-a.y)*p.x+(a.x-b.x)*p.y+(b.x*a.y-a.x*b.y)==0;}

void convex_hull (vector<pt> & a)
{
	if (a.size() == 1)  return;
	sort (a.begin(), a.end(), &cmp);
	pt p1 = a[0],  p2 = a.back();
	vector<pt> up, down;
	up.push_back (p1);
	down.push_back (p1);
	for (size_t i=1; i<a.size(); ++i) 
	{
		if (i==a.size()-1 || cw (p1, a[i], p2)) 
		{
			while (up.size()>=2 && !cw (up[up.size()-2], up[up.size()-1], a[i]))
				up.pop_back();
			up.push_back (a[i]);
		}
		if (i==a.size()-1 || ccw (p1, a[i], p2)) 
		{
			while (down.size()>=2 && !ccw (down[down.size()-2], down[down.size()-1], a[i]))
				down.pop_back();
			down.push_back (a[i]);
		}
	}
	a.clear();
	for (size_t i=0; i<up.size(); ++i)
		a.push_back (up[i]);
	for (size_t i=down.size()-2; i>0; --i)
		a.push_back (down[i]);
}